name: Continuous Integration (RSA)

# Workflow that deploys AWS Lambda for default functions.
# Status: Testing
# Reason: Still trying to think of a better way rather than deploy all the AWS lambda (even if its technically correct approach).
#         Another thing is that the matrix is currently hardcoded; we want to make it dynamic.

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/readyperfectly/rsa.py'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'src/readyperfectly/rsa.py'
  workflow_dispatch:

jobs:
  build:
    name: Deploy ${{ matrix.aws_lambda.function_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        aws_lambda:
          - function_name: "${{ vars.FUNCTION_PREFIX }}_get_rsa_key_pair"
            handler: rsa.get_rsa_key_pair
            runtime: python3.10

    steps:
      - uses: actions/checkout@v4

      - name: List files (for debugging)
        run: ls -R

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create AWS Lambda Function artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.aws_lambda.function_name }}-package                # Name of the artifact (aws-lambda-package.zip)
          path: |                                 # Note: Use unix style path (./). Does not work with Windows style path (.\).
            ${{ vars.LAMBDA_SRC_FOLDER_PATH }}  

      - name: List files (for debugging)
        run: ls -R

      - name: Deploy ${{ matrix.aws_lambda.function_name }}
        uses: aws-actions/aws-lambda-deploy@v1
        with:
          function-name: ${{ matrix.aws_lambda.function_name }}
          code-artifacts-dir: ${{ vars.LAMBDA_SRC_FOLDER_PATH }}
          handler: ${{ matrix.aws_lambda.handler }}
          runtime: ${{ matrix.aws_lambda.runtime }}
          role: ${{ vars.AWS_LAMBDA_ROLE_ARN }}
          tags: '{"environment": "production", "project": "utility-api", "version": "0.1.0"}'
